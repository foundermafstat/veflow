const { ethers } = require("hardhat");

async function main() {
  console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ...");
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã
    const accounts = await ethers.getSigners();
    
    console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–∞—Ö:");
    console.log("=" .repeat(50));
    
    for (let i = 0; i < Math.min(accounts.length, 3); i++) {
      const account = accounts[i];
      const address = await account.getAddress();
      
      console.log(`\n–ö–æ—à–µ–ª–µ–∫ ${i + 1}:`);
      console.log(`–ê–¥—Ä–µ—Å: ${address}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏)
      try {
        const balance = await ethers.provider.getBalance(address);
        console.log(`–ë–∞–ª–∞–Ω—Å ETH: ${ethers.formatEther(balance)} ETH`);
      } catch (error) {
        console.log(`–ë–∞–ª–∞–Ω—Å: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏)`);
      }
    }
    
    console.log("\nüéØ –î–ª—è –¥–µ–ø–ª–æ—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å:");
    const deployerAddress = await accounts[0].getAddress();
    console.log(`Deployer: ${deployerAddress}`);
    
    console.log("\nüí∞ –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ VET:");
    console.log("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: https://faucet.vecha.in/");
    console.log(`2. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ${deployerAddress}`);
    console.log("3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ VET");
    
    console.log("\nüöÄ –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è VET –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π:");
    console.log("npm run deploy:testnet");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

